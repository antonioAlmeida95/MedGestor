// <auto-generated />
using System;
using MedGestor.Adapter.Driven.Database.UnitOfWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedGestor.Adapter.Driven.Database.Migrations
{
    [DbContext(typeof(UnitOfWorkContext))]
    [Migration("20250206230547_Refatoracao_Agenda")]
    partial class Refatoracao_Agenda
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Agenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Agd_AgendaId");

                    b.Property<DateTimeOffset>("DataFim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Agd_DataFim");

                    b.Property<DateTimeOffset>("DataInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Agd_DataInicio");

                    b.Property<int>("Dia")
                        .HasColumnType("integer")
                        .HasColumnName("Agd_Dia");

                    b.Property<int>("Duracao")
                        .HasColumnType("integer")
                        .HasColumnName("Agd_Duracao");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.ToTable("Agd_Agenda", "MedHealth");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Medico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Mdc_MedicoId");

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("Mdc_Crm");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Mdc_Especialidade");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uuid")
                        .HasColumnName("Pes_PessoaId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("Mdc_Status");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("Mdc_Telefone");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Mdc_Medico", "MedHealth");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Pct_PacienteId");

                    b.Property<decimal>("Altura")
                        .HasColumnType("numeric")
                        .HasColumnName("Pct_Altura");

                    b.Property<decimal>("Peso")
                        .HasColumnType("numeric")
                        .HasColumnName("Pct_Peso");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Pct_Paciente", "MedHealth");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Perfil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Prf_PerfilId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Prf_Nome");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("Prf_Status");

                    b.HasKey("Id");

                    b.ToTable("Prf_Perfil", "MedHealth");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.PerfilPermissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Prp_PerfilPermissaoId");

                    b.Property<Guid>("PerfilId")
                        .HasColumnType("uuid")
                        .HasColumnName("Prf_PerfilId");

                    b.Property<Guid>("PermissaoId")
                        .HasColumnType("uuid")
                        .HasColumnName("Per_PermissaoId");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.HasIndex("PermissaoId");

                    b.ToTable("Prp_PerfilPermissao", "MedHealth");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Permissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Per_PermissaoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Per_Valor");

                    b.HasKey("Id");

                    b.ToTable("Per_Permissao", "MedHealth");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Pessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Pes_PessoaId");

                    b.Property<DateTimeOffset>("DataNascimento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Pes_DataNascimento");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("Pes_Documento");

                    b.Property<int>("Genero")
                        .HasColumnType("integer")
                        .HasColumnName("Pes_Genero");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Pes_Nome");

                    b.Property<Guid>("PerfilId")
                        .HasColumnType("uuid")
                        .HasColumnName("Prf_PerfilId");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("Usu_UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Pes_Pessoa", "MedHealth");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Usu_UsuarioId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Usu_Email");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Usu_Senha");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("Usu_Status");

                    b.HasKey("Id");

                    b.ToTable("Usu_Usuario", "MedHealth");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Agenda", b =>
                {
                    b.HasOne("MedGestor.Core.Domain.Entities.Medico", "Medico")
                        .WithMany("Agendas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Medico", b =>
                {
                    b.HasOne("MedGestor.Core.Domain.Entities.Pessoa", "Pessoa")
                        .WithOne("Medico")
                        .HasForeignKey("MedGestor.Core.Domain.Entities.Medico", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Paciente", b =>
                {
                    b.HasOne("MedGestor.Core.Domain.Entities.Pessoa", "Pessoa")
                        .WithOne("Paciente")
                        .HasForeignKey("MedGestor.Core.Domain.Entities.Paciente", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.PerfilPermissao", b =>
                {
                    b.HasOne("MedGestor.Core.Domain.Entities.Perfil", "Perfil")
                        .WithMany("Permissoes")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedGestor.Core.Domain.Entities.Permissao", "Permissao")
                        .WithMany("Perfis")
                        .HasForeignKey("PermissaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("Permissao");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Pessoa", b =>
                {
                    b.HasOne("MedGestor.Core.Domain.Entities.Perfil", "Perfil")
                        .WithMany("Pessoas")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedGestor.Core.Domain.Entities.Usuario", "Usuario")
                        .WithOne("Pessoa")
                        .HasForeignKey("MedGestor.Core.Domain.Entities.Pessoa", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Medico", b =>
                {
                    b.Navigation("Agendas");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Perfil", b =>
                {
                    b.Navigation("Permissoes");

                    b.Navigation("Pessoas");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Permissao", b =>
                {
                    b.Navigation("Perfis");
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Pessoa", b =>
                {
                    b.Navigation("Medico")
                        .IsRequired();

                    b.Navigation("Paciente")
                        .IsRequired();
                });

            modelBuilder.Entity("MedGestor.Core.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Pessoa")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
